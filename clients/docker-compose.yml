services:
  clients_service:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: clients_service
    ports:
      - "3004:3004"
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "5"
    depends_on:
      kafka:
        condition: service_healthy
      postgres:
        condition: service_healthy
    env_file:
      - .env
    networks:
      - clients_network

  postgres:
    image: postgres:14.18
    container_name: postgres
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER_FILE: /run/secrets/postgres_user
      POSTGRES_PASSWORD_FILE: /run/secrets/postgres_password
      POSTGRES_DB: event_tickets
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "$(cat /run/secrets/postgres_user)"]
      interval: 10s
      timeout: 5s
      retries: 10
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - .docker/clients.sql:/docker-entrypoint-initdb.d/clients.sql
    networks:
      - clients_network
    secrets:
      - postgres_password
      - postgres_user

  kafka:
    image: docker.io/bitnami/kafka:4.0.0
    container_name: kafka
    ports:
      - "9094:9094" # External (host machine)
    healthcheck:
      test:
        [
          "CMD",
          "kafka-broker-api-versions.sh",
          "--bootstrap-server",
          "kafka:9092",
        ]
      interval: 10s
      timeout: 5s
      retries: 10
    environment:
      - KAFKA_CFG_NODE_ID=0
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@kafka:9093
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093,EXTERNAL://:9094
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092,EXTERNAL://localhost:9094
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,EXTERNAL:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=true
    volumes:
      - "kafka_data:/bitnami"
    networks:
      - clients_network

  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: jaeger
    ports:
      - "16686:16686"
      - "4317"
    networks:
      - clients_network

  collector:
    image: otel/opentelemetry-collector-contrib:latest
    container_name: collector
    volumes:
      - .docker/otel-collector-config.yaml:/etc/otelcol-contrib/config.yaml
    command: --config /etc/otelcol-contrib/config.yaml
    ports:
      - 4318:4318
      - 4317:4317
      - 8889:8889 # Prometheus exporter metrics
    restart: always
    depends_on:
      - jaeger
      - prometheus
    networks:
      - clients_network

volumes:
  postgres_data:
  kafka_data:

networks:
  clients_network:

secrets:
  postgres_password:
    file: .docker/secrets/postgres_password.txt
  postgres_user:
    file: .docker/secrets/postgres_user.txt
  grafana_user:
    file: .docker/secrets/grafana_user.txt
  grafana_password:
    file: .docker/secrets/grafana_password.txt
