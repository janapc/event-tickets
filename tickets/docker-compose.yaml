services:
  tickets_service:
    build: .
    container_name: tickets_service
    env_file:
      - .env.production
    depends_on:
      mongodb:
        condition: service_healthy
      kafka:
        condition: service_healthy
    networks:
      - tickets_network
    logging:
      driver: 'json-file'
      options:
        max-size: '10m'
        max-file: '5'
  mongodb:
    image: mongo:8.0.12
    container_name: mongodb
    ports:
      - '27017:27017'
    environment:
      - MONGO_INITDB_ROOT_USERNAME=root
      - MONGO_INITDB_ROOT_PASSWORD_FILE=/run/secrets/mongodb_password
    volumes:
      - mongodb_data:/data/db
    networks:
      - tickets_network
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/local --quiet
      interval: 10s
      timeout: 10s
      retries: 3
      start_period: 20s
    secrets:
      - mongodb_password
  kafka:
    image: docker.io/bitnami/kafka:4.0.0
    container_name: kafka
    ports:
      - '9094:9094' # External (host machine)
    healthcheck:
      test:
        [
          'CMD',
          'kafka-broker-api-versions.sh',
          '--bootstrap-server',
          'kafka:9092',
        ]
      interval: 10s
      timeout: 5s
      retries: 10
    environment:
      - KAFKA_CFG_NODE_ID=0
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@kafka:9093
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093,EXTERNAL://:9094
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092,EXTERNAL://localhost:9094
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,EXTERNAL:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=true
    volumes:
      - 'kafka_data:/bitnami'
    networks:
      - tickets_network

  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: jaeger
    ports:
      - '16686:16686'
      - '4317'
    networks:
      - tickets_network

  collector:
    image: otel/opentelemetry-collector-contrib:latest
    container_name: collector
    command: ['--config=/etc/otel-collector-config.yml']
    volumes:
      - .docker/otel-collector-config.yaml:/etc/otel-collector-config.yml
    ports:
      - 4318:4318
      - 4317:4317
    restart: always
    depends_on:
      - jaeger
      - prometheus
    networks:
      - tickets_network
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - '9090:9090'
    volumes:
      - prometheus_data:/prometheus
      - .docker/prometheus.yml:/etc/prometheus/prometheus.yml
    networks:
      - tickets_network
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - '3001:3000'
    environment:
      - GF_SECURITY_ADMIN_USER__FILE=/run/secrets/grafana_user
      - GF_SECURITY_ADMIN_PASSWORD__FILE=/run/secrets/grafana_password
    volumes:
      - grafana_data:/var/lib/grafana
    networks:
      - tickets_network
    secrets:
      - grafana_user
      - grafana_password
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:9.0.0
    container_name: elasticsearch
    restart: always
    ports:
      - '9200:9200'
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - xpack.security.http.ssl.enabled=false
    networks:
      - tickets_network

  filebeat:
    image: docker.elastic.co/beats/filebeat:9.0.0
    container_name: filebeat
    user: root
    volumes:
      - ./.docker/filebeat.yml:/usr/share/filebeat/filebeat.yml:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      - tickets_network
    depends_on:
      - elasticsearch

  kibana:
    image: docker.elastic.co/kibana/kibana:9.0.0
    container_name: kibana
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    ports:
      - '5601:5601'
    networks:
      - tickets_network
    depends_on:
      - elasticsearch

volumes:
  mongodb_data:
  kafka_data:
  grafana_data:
  prometheus_data:

networks:
  tickets_network:

secrets:
  mongodb_password:
    file: .docker/secrets/mongodb_password.txt
  grafana_user:
    file: .docker/secrets/grafana_user.txt
  grafana_password:
    file: .docker/secrets/grafana_password.txt
