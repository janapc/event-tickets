services:
  marketing_service:
    build: .
    container_name: marketing_service
    restart: always
    ports:
      - '3005:3005'
    env_file:
      - .env.production
    depends_on:
      mongodb:
        condition: service_healthy
      kafka:
        condition: service_healthy
        restart: true
    networks:
      - marketing_network
    logging:
      driver: 'json-file'
      options:
        max-size: '10m'
        max-file: '5'
  mongodb:
    image: mongo:latest
    container_name: mongodb
    ports:
      - '27017:27017'
    environment:
      - MONGO_INITDB_ROOT_USERNAME=root
      - MONGO_INITDB_ROOT_PASSWORD_FILE=/run/secrets/mongodb_password
    volumes:
      - mongodb_data:/data/db
    networks:
      - marketing_network
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/local --quiet
      interval: 10s
      timeout: 10s
      retries: 3
      start_period: 20s
    secrets:
      - mongodb_password
  kafka:
    image: 'confluentinc/cp-kafka:latest'
    container_name: kafka
    ports:
      - '9092:9092'
    environment:
      - KAFKA_NODE_ID=1
      - KAFKA_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      - KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR=1
      - KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS=0
      - KAFKA_TRANSACTION_STATE_LOG_MIN_ISR=1
      - KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR=1
      - KAFKA_PROCESS_ROLES=broker,controller
      - KAFKA_CONTROLLER_QUORUM_VOTERS=1@kafka:29093
      - KAFKA_LISTENERS=PLAINTEXT://kafka:29092,CONTROLLER://kafka:29093,PLAINTEXT_HOST://0.0.0.0:9092
      - KAFKA_INTER_BROKER_LISTENER_NAME=PLAINTEXT
      - KAFKA_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - CLUSTER_ID=MkU3OEVBNTcwNTJENDM2Qk
    healthcheck:
      test:
        [
          'CMD-SHELL',
          'kafka-topics --bootstrap-server localhost:9092 --list || exit 1',
        ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 20s
    volumes:
      - kafka_data:/var/lib/kafka/data
    networks:
      - marketing_network

  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: jaeger
    ports:
      - '16686:16686'
      - '4317'
    networks:
      - marketing_network

  collector:
    image: otel/opentelemetry-collector-contrib:latest
    container_name: collector
    command: ['--config=/etc/otel-collector-config.yml']
    volumes:
      - .docker/otel-collector-config.yaml:/etc/otel-collector-config.yml
    ports:
      - 4318:4318
      - 4317:4317
    restart: always
    depends_on:
      - jaeger
      - prometheus
    networks:
      - marketing_network
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - '9090:9090'
    volumes:
      - prometheus_data:/prometheus
      - .docker/prometheus.yml:/etc/prometheus/prometheus.yml
    networks:
      - marketing_network
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - '3001:3000'
    environment:
      - GF_SECURITY_ADMIN_USER__FILE=/run/secrets/grafana_user
      - GF_SECURITY_ADMIN_PASSWORD__FILE=/run/secrets/grafana_password
    volumes:
      - grafana_data:/var/lib/grafana
    networks:
      - marketing_network
    secrets:
      - grafana_user
      - grafana_password
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:9.0.0
    container_name: elasticsearch
    restart: always
    ports:
      - '9200:9200'
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - xpack.security.http.ssl.enabled=false
    networks:
      - marketing_network

  filebeat:
    image: docker.elastic.co/beats/filebeat:9.0.0
    container_name: filebeat
    user: root
    volumes:
      - ./.docker/filebeat.yml:/usr/share/filebeat/filebeat.yml:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      - marketing_network
    depends_on:
      - elasticsearch

  kibana:
    image: docker.elastic.co/kibana/kibana:9.0.0
    container_name: kibana
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    ports:
      - '5601:5601'
    networks:
      - marketing_network
    depends_on:
      - elasticsearch

  apm_server:
    image: docker.elastic.co/apm/apm-server:9.0.1
    container_name: apm_server
    depends_on:
      - elasticsearch
      - kibana
    environment:
      - output.elasticsearch.hosts=["http://elasticsearch:9200"]
      - apm-server.auth.anonymous.enabled=true
      - apm-server.auth.anonymous.allow_agent=["opentelemetry"]
      - apm-server.auth.anonymous.allow_service=["app"]
      - apm-server.kibana.enabled=true
      - apm-server.kibana.host=http://kibana:5601
      - setup.kibana.host=http://kibana:5601
    ports:
      - '8200:8200'
    networks:
      - marketing_network

volumes:
  mongodb_data:
  kafka_data:
  grafana_data:
  prometheus_data:

networks:
  marketing_network:

secrets:
  mongodb_password:
    file: .docker/secrets/mongodb_password.txt
  grafana_user:
    file: .docker/secrets/grafana_user.txt
  grafana_password:
    file: .docker/secrets/grafana_password.txt
